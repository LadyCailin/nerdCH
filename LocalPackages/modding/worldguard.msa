# Create Region with proper flags and fix flags. 
# Supports multiple owners as final arguments.

*:/cregion $name $first [$] = >>>
	if (sk_region_exists($name)) {
		die(color(RED).'A region by that name already exists.')
	} else {
		run('/region define '.$name.' '.$first . ' ' . $)
		_add_flags($name, 250, 6, $first)
	}
<<<
*:/cregion $name = msg(color(RED).'You must specify an owner as well. /cregion <name> <owner>')

*:/addflags $name [$owner=''] = >>>
	if (! sk_region_exists($name)) {
		die(color(RED).'There is no region by that name.')
	} else {
		run(concat('/region flag ', $name, ' use allow'))
		run(concat('/region flag ', $name, ' interact allow'))
		run(concat('/region flag ', $name, ' chest-access allow'))
		run(concat('/region flag ', $name, ' vehicle-place allow'))
		run(concat('/region flag ', $name, ' vehicle-destroy allow'))
		run(concat('/region flag ', $name, ' ride allow'))
                if (import('sharedata.source') == 'creative') {
			run(concat('/region flag ', $name, ' date ', simple_date('yyyy/MM/dd HH:mm:ss z')))
			run(concat('/region flag ', $name, ' created-by ', player()))
			if($owner != '') {
				run(concat('/region flag ', $name, ' first-owner ', $owner))
			}
		}
		if (import('sharedata.source') == 'pve') {
			run(concat('/region flag ', $name, ' date ', simple_date('yyyy/MM/dd HH:mm:ss z')))
			run(concat('/region flag ', $name, ' created-by ', player()))
			run(concat('/region flag ', $name, ' damage-animals allow'))
		}
	}
<<<

*:'/rg-pvp' $name = >>>
        if (! sk_region_exists($name)) {
                die(color(RED).'There is no region by that name.')
        } else {
                run(concat('/region flag ', $name, ' pvp allow'))
		if (import('sharedata.source') == 'creative') {
                        run(concat('/region flag ', $name, ' gamemode survival'))
                        run(concat('/region flag ', $name, ' invincible deny'))
                }
        }
<<<

*:/members $region = >>>
	@info = sk_region_info($region, pworld());
	@members = array_merge(@info[1]['players'], @info[2]['players']);
	@sep = '';
	@list = '';
	foreach (@player in @members) {
		try(
			@list = @list . @sep . _get_username_from_uuid(@player);
			@sep = ', ';
		);
	}
	msg(color(GRAY) . 'Members of ' . $region . ': ' . color(WHITE) . @list);
<<<


*:/owners $region = >>>
	@owners = sk_region_info($region, pworld())[1]['players'];
	@sep = '';
	@list = '';
	foreach (@player in @owners) {
		try(
			@list = @list . @sep . _get_username_from_uuid(@player);
			@sep = ', ';
		);
	}
	msg(color(GRAY) . 'Owners of ' . $region . ': ' . color(WHITE) . @list);
<<<


# Show help for no-args invocation.

nerdch.level.admin:'/region-rename' = >>>
	msg(color(RED).'/region-rename oldName newName')
	msg(color(RED).'    Rename a region. The new region name must not be in use.')
	die()
<<<

nerdch.level.admin:'/region-rename' $oldName $newName = >>>
	if (!sk_region_exists($oldName)) {
		die(color(RED).'Region \''.$oldName.'\' does not exist in this world.')
	}
	if (sk_region_exists($newName)) {
		die(color(RED).'A region named \''.$newName.'\' already exists in this world.')
	}
	sk_region_rename($oldName,$newName)
	msg(color(GOLD).'Renamed region \''.$oldName.'\' as \''.$newName.'\'.')
<<<


# Test whether there are any regions intersecting the current selection.
# Limitations: 
# 	* There is no way to get the poly selection points, so a cuboid is assumed.
#	* A temporary region is created since selections can't be tested. The temporary
#	  region is immediately removed.
#	* sk_pos[12]() stay set even after //desel (CH or WorldGuard bug?)

*:'/region-intersects' = >>>
	_assertperm('restricted')
	@p1 = sk_pos1()
	@p2 = sk_pos2()
	msg(color(GOLD).'Point 1: '.color(YELLOW).@p1)
	msg(color(GOLD).'Point 2: '.color(YELLOW).@p2)
	if (is_null(@p1) || is_null(@p2)) {
		die(color(RED).'You need to make a cuboid selection.')
	} else {
		@tempRegionName = player().'_intersection_test'
		if (sk_region_exists(@tempRegionName)) {
			# Unless there's a bug, the temp region should be removed.
			sk_region_update(@tempRegionName, array(@p1, @p2))
		} else {
			sk_region_create(@tempRegionName, array(@p1, @p2))
		}
		try(
			@testedRegions = sk_all_regions(pworld())
			@regions = sk_region_intersect(pworld(), @tempRegionName, @testedRegions)
			@message = color(GOLD).'Intersecting regions: '
			@first = true
			foreach (@region in @regions) {
				if (@region != @tempRegionName) {
					if (@first) {
						@first = false;
					} else {
						@message = @message.color(WHITE) . ', ';
					}
					@owners = sk_region_info(@region, pworld())[1]['players'];
					@sep = '';
					@formattedOwners = '';
					foreach (@player in @owners) {
						try(
							@formattedOwners = @formattedOwners . @sep . _get_username_from_uuid(@player);
							@sep = ', ';
						);
					}
					@message = @message . color(YELLOW) . @region. color(GRAY) . ' (' . @formattedOwners . ')';
				}
			}
			msg(@message);
		,@e,
			msg(color(RED).'Error: '.e);
		);
		sk_region_remove(@tempRegionName);
	}
<<<
