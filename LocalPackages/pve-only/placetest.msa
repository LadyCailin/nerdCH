/*
 * Database layout:
 * places - contains all the places. Holds an array of places.
 * A place is an associative array with 'name' and 'coord' fields.
 */

*:/placetest [$] = >>>
	@places = get_value('places')
	@netherportals = get_value('netherportals')
	@endportals = get_value('endportals')
	if(@places == null){
		@places = array()
	}
	if(@netherportals == null){
		@netherportals = array()
	}
	if(@endportals == null){
		@endportals = array()
	}
	if($ == ''){
		@placenames = array()
		@placecount = 0
		@nethernames = array()
		@nethercount = 0
		@endnames = array()
		@endcount = 0
		# List all the places
		@temp1 = array()
		foreach(@places, @place,
			array_push(@temp1, @place['name'])
		)
		@places = @temp1
		array_sort(@places, STRING_IC)
		foreach(@places, @place,
			@color = GRAY
			if(@placecount % 2 == 1){
				@color = WHITE
			}
			(@placecount++)
			array_push(@placenames, color(@color).@place)
		)
		# List all the nether portals
		@temp2 = array()
		foreach(@netherportals, @netherportal,
			array_push(@temp2, @netherportal['name'])
		)
		@netherportals = @temp2
		array_sort(@netherportals, STRING_IC)
		foreach(@netherportals, @netherportal,
			@color = GRAY
			if(@nethercount % 2 == 1){
				@color = WHITE
			}
			(@nethercount++)
			array_push(@nethernames, color(@color).@netherportal)
		)
		# List all the end portals
		@temp3 = array()
		foreach(@endportals, @endportal,
			array_push(@temp3, @endportal['name'])
		)
		@endportals = @temp3
		array_sort(@endportals, STRING_IC)
		foreach(@endportals, @endportal,
			@color = GRAY
			if(@endcount % 2 == 1){
				@color = WHITE
			}
			(@endcount++)
			array_push(@endnames, color(@color).@endportal)
		)
		msg('Places: '.array_implode(@placenames, ', '))
		msg('Nether Portals: '.array_implode(@nethernames, ', '))
		msg('End Portals: '.array_implode(@endnames, ', '))
		msg(color(LIGHT_PURPLE).'Run '.color(GRAY).'/place <place name>'color(LIGHT_PURPLE).' to get pointed at that place, '
			.color(GRAY).'/place netherportal'.color(LIGHT_PURPLE).' to get pointed at the nearest Nether Portal, '
			.color(GRAY).'/place endportal'.color(LIGHT_PURPLE).' to get pointed at the nearest End Portal, or'
			.color(GRAY).'/nearest-place'.color(LIGHT_PURPLE).' to get pointed at the nearest place (non-portal)')
	} else if(equals_ic('netherportal', $)) {
		@netherportals = get_value('netherportals')
		if(@netherportals == null){
			@netherportals = array()
		}
		proc(_distance, @loc1, @loc2,
			return(sqrt(((@loc1[0] - @loc2[0]) ** 2) + ((@loc1[2] - @loc2[2]) ** 2)))
		)
		@closest = 10000
		@closestNP = null
		foreach(@netherportals, @netherportal,
			if (pworld() == "world_nether"){
				@ploc=ploc()
				@ploc[0]=@ploc[0]*8
				@ploc[2]=@ploc[2]*8
			} else {
				@ploc=ploc()
			}
			@dist = _distance(@ploc, @netherportal['coord'])
			if(@dist < @closest){
				@closestNP = @netherportal
				@closest = @dist
			}
		)
		if(@closestNP != null){
			call_alias('/place '.@closestNP['name'])
		} else {
			msg(color(LIGHT_PURPLE).'Hmm, doesn\'t look like there are any nether portals yet')
		}
		die();
	} else if(equals_ic('endportal', $)) {
		@endportals = get_value('endportals')
		if(@endportals == null){
			@endportals = array()
		}
		proc(_distance, @loc1, @loc2,
			return(sqrt(((@loc1[0] - @loc2[0]) ** 2) + ((@loc1[2] - @loc2[2]) ** 2)))
		)
		@closest = 10000
		@closestEP = null
		foreach(@endportals, @endportal,
			@dist = _distance(ploc(), @endportal['coord'])
			if(@dist < @closest){
				@closestEP = @endportal
				@closest = @dist
			}
		)
		if(@closestEP != null){
			call_alias('/place '.@closestEP['name'])
		} else {
			msg(color(LIGHT_PURPLE).'Hmm, doesn\'t look like there are any end portals yet')
		}
		die();
	} else {
		@allLocs = array_merge(@places,@netherportals,@endportals)
		foreach(@allLocs, @place,
			if(equals_ic(@place['name'], $)){
				@loc = @place['coord']
				@x = @loc[0]
				@z = @loc[2]
				if(pworld()=="world_nether"){
					@x=@x/8
					@z=@z/8
				}
				@ploc = array(x: ploc()[0], z: ploc()[2])
				msg(color(LIGHT_PURPLE).@place['name'].color(WHITE).':')
				msg(color(RED).'X: '.color(WHITE).sprintf('%.3f', @x))
				msg(color(GREEN).'Z: '.color(WHITE).sprintf('%.3f', @z))
				msg(color(BLUE).'Distance: '.color(WHITE).sprintf('%.3f', sqrt(pow(@z - @ploc['z'], 2) + pow(@x - @ploc['x'], 2))))
				msg(color(BLACK).'[name:'.@place['name'].', x:'.sprintf('%.0f', @x).', z:'.sprintf('%.0f', @z).']')
				@yaw = to_degrees(atan2((@ploc['z'] - @z), (@ploc['x'] - @x)))
				@yaw += 90
				if(!pinfo(player(), 14)){
				    pfacing(@yaw, pfacing()[1])
				}
				die()
			}
			else {
			}
		)
		msg(color(LIGHT_PURPLE).'This is not an existing place, use '.color(GRAY).'/place '
					.color(LIGHT_PURPLE).'to find one with the correct spelling!')
	}
<<<
